---
import CardExplanation from "./Explanation/CardExplanation.astro";
import { Icon } from 'astro-icon/components';

interface Props {
    data: Array<
        {
            title: string;
            description: string;
            path: string;
        }
    >
    imagePath: string;
}

const { data, imagePath } = Astro.props;

let startIndex = 0;
let endIndex = 4;
let pageNumber = 1;
const visibleData = data.slice(startIndex, endIndex);
---

<div class="w-full max-w-4xl mx-auto my-7 xl:px-0 px-4">
    <div class="flex flex-col items-start justify-start md:flex-row md:space-x-7">
        <div class="w-full md:w-2/3 space-y-7">
            {Astro.url.pathname !== "/explanation" &&
                <div class="relative">
                    <div class="absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none">
                        <Icon class="size-8" name="mdi:search" />
                    </div>
                    <input
                        type="text"
                        placeholder="Rechercher par titre"
                        id="searchInput"
                        class="w-full border ps-12 rounded-lg p-4 text-lg font-medium text-gray-900 outline-none"
                    />
                </div>
            }

            <div id="cardContainer">
                {visibleData.map((d) => (
                        <CardExplanation title={d.title} description={d.description} link={d.path} />
                ))}
            </div>

            {Astro.url.pathname !== "/explanation" &&
                <div class="flex items-center justify-center mt-4">
                    <button id="prev" class="flex items-center justify-center px-3 h-12 ms-0 leading-tight text-gray-500 bg-white border border-e-0 border-gray-300 rounded-s-lg hover:bg-gray-100 hover:text-gray-700">
                        <Icon class="size-8" name="mdi:chevron-left" />
                    </button>
                    <input disabled id="page-number" class="w-12 h-12 flex text-center items-center justify-center leading-tight text-gray-500 bg-white border border-gray-300 border-r-0" value={pageNumber} />
                    <span class="flex items-center justify-center text-gray-500 border border-gray-300 border-x-0 h-12">/</span>
                    <span id="total-pages" class="w-12 flex items-center justify-center text-gray-500 border border-gray-300 border-x-0 h-12">
                        {Math.ceil(data.length / 4)}
                    </span>
                    <button id="next" class="flex items-center justify-center px-3 h-12 leading-tight text-gray-500 bg-white border border-gray-300 rounded-e-lg hover:bg-gray-100 hover:text-gray-700">
                        <Icon class="size-8" name="mdi:chevron-right" />
                    </button>
                </div>
            }
        </div>
        <div class="w-1/3 p-6 flex justify-center">
            <img src={imagePath} alt="Illustration d'un furet tenant un écriteau sur lequel est écris Paris Web" class="rounded-lg shadow-lg">
        </div>
    </div>
</div>

<script define:vars={{ data }}>
    document.addEventListener('astro:page-load', () => {
        const itemsPerPage = 4;
        let startIndex = 0;
        let endIndex = itemsPerPage;
        let pageNumber = 1;
        const totalItems = data.length;

        // Map data to the UI
        function mapData(visibleData) {
            const cardContainer = document.getElementById("cardContainer");
            if (!cardContainer) {
                console.error("Card container not found");
                return;
            }

            cardContainer.innerHTML = "";

            visibleData.forEach(d => {
                const card = document.createElement("div");
                card.innerHTML = `<a href="${d.path}" class="block card my-4">
                    <div class="relative border border-transparent border-dashed cursor-pointer p-7 group rounded-2xl">
                        <div class="absolute inset-0 z-20 w-full h-full duration-300 ease-out bg-white border border-dashed dark:bg-neutral-950 rounded-2xl border-neutral-300 dark:border-neutral-600 group-hover:-translate-x-1 group-hover:-translate-y-1"></div>
                        <div class="absolute inset-0 z-10 w-full h-full duration-300 ease-out border border-dashed rounded-2xl border-neutral-300 dark:border-neutral-600 group-hover:translate-x-1 group-hover:translate-y-1"></div>
                        <div class="relative z-30 duration-300 ease-out group-hover:-translate-x-1 group-hover:-translate-y-1">
                            <h2 class="flex items-center mb-3">
                                <span class="card-title text-xl font-bold leading-tight tracking-tight sm:text-2xl dark:text-neutral-100">
                                    ${d.title}
                                </span>
                                <svg
                                    class="group-hover:translate-x-0 flex-shrink-0 translate-y-0.5 -translate-x-1 w-2.5 h-2.5 stroke-current ml-1 transition-all ease-in-out duration-200 transform"
                                    viewBox="0 0 13 15"
                                    version="1.1"
                                    xmlns="http://www.w3.org/2000/svg"
                                    xmlns:xlink="http://www.w3.org/1999/xlink">
                                    <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" stroke-linecap="round" stroke-linejoin="round">
                                        <g id="svg" transform="translate(0.666667, 2.333333)" stroke="currentColor" stroke-width="2.4">
                                            <g>
                                                <polyline class="transition-all duration-200 ease-out opacity-0 delay-0 group-hover:opacity-100" points="5.33333333 0 10.8333333 5.5 5.33333333 11"></polyline>
                                                <line class="transition-all duration-200 ease-out transform -translate-x-1 opacity-0 group-hover:translate-x-0 group-hover:opacity-100 group-hover:ml-0" x1="10.8333333" y1="5.5" x2="0.833333333" y2="5.16666667"></line>
                                            </g>
                                        </g>
                                    </g>
                                </svg>
                            </h2>
                            <p class="text-sm text-neutral-600 dark:text-neutral-400">
                                <span>${d.description}</span>
                            </p>
                        </div>
                    </div>
                </a>`;
                cardContainer.appendChild(card);
            });
        }

        function prevPage() {
            if (startIndex > 0) {
                startIndex -= itemsPerPage;
                endIndex -= itemsPerPage;
                pageNumber -= 1;
                updatePageNumber();
                mapData(data.slice(startIndex, endIndex));
            }
        }

        function nextPage() {
            if (endIndex < totalItems) {
                startIndex += itemsPerPage;
                endIndex += itemsPerPage;
                pageNumber += 1;
                updatePageNumber();
                mapData(data.slice(startIndex, endIndex));
            }
        }

        function updatePageNumber() {
            const pageNumberInput = document.getElementById('page-number');
            if (pageNumberInput) {
                pageNumberInput.value = pageNumber;
            }
        }

        const pageNumberInput = document.getElementById('page-number');
        if (pageNumberInput) {
            pageNumberInput.addEventListener('change', (e) => {
                let currentPageNumber = parseInt(e.target.value);
                const maxPageNumber = Math.ceil(totalItems / itemsPerPage);

                if (currentPageNumber > maxPageNumber) {
                    currentPageNumber = maxPageNumber;
                } else if (currentPageNumber < 1) {
                    currentPageNumber = 1;
                }

                pageNumber = currentPageNumber;
                startIndex = (pageNumber - 1) * itemsPerPage;
                endIndex = startIndex + itemsPerPage;
                mapData(data.slice(startIndex, endIndex));
            });
        }

        const prevButton = document.getElementById('prev');
        const nextButton = document.getElementById('next');

        if (prevButton) {
            prevButton.addEventListener('click', prevPage);
        }

        if (nextButton) {
            nextButton.addEventListener('click', nextPage);
        }

        function filterCards() {
            const input = document.getElementById('searchInput')?.value.toUpperCase();
            if (!input) {
                mapData(data.slice(startIndex, endIndex));
            } else {
                const filteredData = data.filter((d) =>
                    d.title.toUpperCase().includes(input)
                );
                mapData(filteredData);
            }
        }

        const searchInput = document.getElementById('searchInput');
        if (searchInput) {
            searchInput.addEventListener('keyup', filterCards);
        }

        mapData(data.slice(startIndex, endIndex));
    });
</script>






