---
import Layout from "../../layouts/Layout.astro";
import Footer from "../../components/Footer.astro"
import Pagination from "../../components/Pagination.astro";
import InputAndFilter from "../../components/InputAndFilter.astro";
import GetOrHideMapButton from "../../components/GetOrHideMapButton.astro";
import CardEvent from "../../components/CardEvent.astro";
import ListMapEvent from "../../components/ListMapEvent.astro";

let events = [];

async function loadEvents() {
    try {
        const response = await fetch('/communities-events.json');
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();

        events = data.map(city => ({
            title: city.city,
            description: city.description || `Découvrez les événements à ${city.city}.`,
            events: city.communities.flatMap(community =>
                community.events.length > 0
                    ? community.events.map(event => ({
                        path: event.link,
                        location: {
                            city: city.city,
                            coordinates: [event.latitude, event.longitude],
                        },
                    }))
                    : []
            ),
        }));

        return events;
    } catch (error) {
        console.error("Failed to load events:", error);
        return [];
    }
}

let allEvents = [];
let visibleData = [];
const itemsPerPage = 6;
let startIndex = 0;
let pageNumber = 1;
let endIndex = itemsPerPage;

async function fetchData() {
    allEvents = await loadEvents();
    visibleData = allEvents.slice(startIndex, endIndex);
}

fetchData();
---

<Layout title="Événements">
    <h1 class="text-4xl text-center font-bold mt-8">Événements</h1>
    <p class="text-center text-lg mt-4 mx-4">
        Retrouvez ici une liste non-exhaustive de nombreux événements et communautés dev.
    </p>

    <GetOrHideMapButton />
    {/*<InputAndFilter data={events} />*/}

    <ul id="cardView" class="m-4 hidden grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2 auto-rows-[1fr]">
        {visibleData.map((event) => (
            <CardEvent
                title={event.title}
                description={event.description}
                events={event.events}
            />
        ))}
    </ul>

    <div id="mapView" class="flex flex-wrap md:flex-nowrap">
        <ul id="mapList" class="md:w-[50%] h-96 overflow-auto">
            {visibleData.map((event) => (
                    <ListMapEvent data={event} />
            ))}
        </ul>

        <div class="m-4 map w-full md:w-[50%]">
            <div id="map" style="height: 400px;"></div>
        </div>
    </div>

    <Pagination data={events} pageNumber={pageNumber} />
    <Footer />
</Layout>

<script>
    import { coordinatesCities } from "../../datas/coordinatesCities";

    document.addEventListener('astro:page-load', async () => {
        if (window.location.pathname !== "/events") {
            return;
        }

        const L = (await import('leaflet')).default;
        const map = L.map('map').setView([48.866667, 2.333333], 10);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        let markers = {};
        let filteredEvents = [];
        let allEvents = [];

        async function loadEvents() {
            const response = await fetch('/communities-events.json');
            const data = await response.json();

            data.forEach(city => {
                city.communities.forEach(community => {
                    const events = community.events.length > 0
                        ? community.events.map(event => ({
                            path: event.link,
                            location: {
                                city: city.city,
                                coordinates: [event.latitude, event.longitude]
                            },
                            isNotEvent: false
                        }))
                        : (() => {
                            const defaultCity = coordinatesCities.find(c => c.city === city.city);
                            return [{
                                path: "#",
                                location: {
                                    city: city.city,
                                    coordinates: defaultCity ? defaultCity.coordinates : [0, 0]
                                },
                                isNotEvent: true
                            }];
                        })();

                    allEvents.push({
                        title: community.name,
                        description: community.description || `Ne manquez pas les événements de la communauté ${community.name}.`,
                        events
                    });
                });
            });

            filteredEvents = [...allEvents];
            setupPagination();
            mapData(filteredEvents.slice(startIndex, endIndex));
        }

        function getBasePath(path: string): string {
            const segments = path.split('/');
            const eventsIndex = segments.indexOf('events');
            if (eventsIndex !== -1) {
                return segments.slice(0, eventsIndex + 1).join('/');
            }
            return path;
        }

        function setupPagination() {
            updatePageNumber();
            const totalPages = Math.ceil(filteredEvents.length / itemsPerPage);
            document.getElementById('total-pages').textContent = totalPages;
        }

        function updateMap(visibleData) {
            Object.values(markers).forEach(marker => map.removeLayer(marker));
            markers = {};

            visibleData.forEach(item => {
                item.events.forEach(event => {
                    const marker = L.marker(event.location.coordinates).addTo(map);
                    marker.bindPopup(`
                        <div class="popup-content">
                            <h3 class="font-bold text-lg">${item.title}</h3>
                            <p class="text-gray-700">${item.description}</p>
                            <p class="text-sm text-gray-500">${event.location.city}</p>
                            <a href="${event.path}" target="_blank" class="text-blue-500 hover:underline">En savoir plus</a>
                        </div>
                    `);
                    markers[`${item.title}`] = marker;
                });
            });

            const bounds = L.latLngBounds(
                visibleData.flatMap(item =>
                    item.events.map(event => L.latLng(event.location.coordinates))
                )
            );
            map.fitBounds(bounds);
        }

        const itemsPerPage = 6;
        let startIndex = 0;
        let endIndex = itemsPerPage;
        let pageNumber = 1;

        function updatePageNumber() {
            document.getElementById('page-number').value = pageNumber;
        }

        function mapData(visibleData) {
            const listContainer = document.getElementById("mapList");
            const cardContainer = document.getElementById("cardView");
            listContainer.innerHTML = "";
            cardContainer.innerHTML = "";

            visibleData.forEach(d => {
                const list = document.createElement("li");
                const validEvents = d.events.filter(event => !event.isNotEvent);
                const eventCount = validEvents.length;

                const eventClass =
                    eventCount === 0
                        ? 'bg-red-100 text-red-800'
                        : 'bg-sky-100 text-sky-800';

                list.innerHTML = `
                    <li data-marker="${d.title}" class="marker-item p-4 mb-4 m-4 bg-white border border-default transition-all hover:cursor-pointer hover:text-white hover:bg-sky-700">
                        <h2 class="font-semibold">${d.title}</h2>
                        <p class="text-sm my-2">${d.description}</p>
                        <span class="${eventClass} text-sm font-medium me-2 px-2.5 py-1 rounded">
                           ${eventCount === 0
                                ? 'Aucun événement'
                                : `${eventCount} événement${eventCount > 1 ? 's' : ''}`}
                        </span>
                    </li>`;
                listContainer.appendChild(list);
            });

            visibleData.forEach(d => {
                const card = document.createElement("div");
                console.log(d)

                card.innerHTML = `<a href=${getBasePath(d.events[0].path)}>
                    <div class="min-h-full flex flex-col items-center gap-4 border border-default bg-offset p-6 transition duration-300 ease-in-out hover:cursor-pointer hover:text-white hover:bg-sky-700">
                        <p class="text-center font-extrabold text-xl">${d.title}</p>
                        <p class="text-center text-offset text-sm">${d.description}</p>
                    </div>
                </a>`;
                cardContainer.appendChild(card);
            });

            updateMap(visibleData);

            const allItems = document.querySelectorAll(".marker-item");

            allItems.forEach(item => {
                item.addEventListener('click', () => {
                    const markerTitle = item.getAttribute('data-marker');
                    const marker = markers[markerTitle];

                    if (marker) {
                        marker.openPopup();

                        const markerLatLng = marker.getLatLng();

                        const offsetLatLng = L.latLng(markerLatLng.lat + 0.05, markerLatLng.lng);
                        map.setView(offsetLatLng, 11, { animate: true });
                    }
                });
            });
        }

        function prevPage() {
            if (startIndex > 0) {
                startIndex -= itemsPerPage;
                endIndex -= itemsPerPage;
                pageNumber -= 1;
                updatePageNumber();
                mapData(filteredEvents.slice(startIndex, endIndex));
            }
        }

        function nextPage() {
            if (endIndex < filteredEvents.length) {
                startIndex += itemsPerPage;
                endIndex += itemsPerPage;
                pageNumber += 1;
                updatePageNumber();
                mapData(filteredEvents.slice(startIndex, endIndex));
            }
        }

        function filterData() {
            const input = document.getElementById('searchInput').value.toUpperCase();
            const city = document.getElementById('citySelect').value;

            filteredEvents = allEvents.filter(d => {
                const matchesTitle = d.title.toUpperCase().includes(input);
                const matchesCity = city === "" || d.events.some(event => event.location.city === city);
                return matchesTitle && matchesCity;
            });

            startIndex = 0;
            endIndex = itemsPerPage;
            pageNumber = 1;
            setupPagination();
            mapData(filteredEvents.slice(startIndex, endIndex));
        }

        const toggleButton = document.getElementById("toggleButton");
        const cardView = document.getElementById("cardView");
        const mapView = document.getElementById("mapView");
        const buttonText = document.getElementById("buttonText");

        toggleButton.addEventListener("click", () => {
            cardView.classList.toggle("hidden");
            mapView.classList.toggle("hidden");

            if (mapView.classList.contains("hidden")) {
                buttonText.textContent = "Afficher avec la carte";
            } else {
                buttonText.textContent = "Afficher sans la carte";
            }
        });

        document.getElementById('prev').addEventListener('click', prevPage);
        document.getElementById('next').addEventListener('click', nextPage);
        //document.getElementById('searchInput').addEventListener('keyup', filterData);
        //document.getElementById('citySelect').addEventListener('change', filterData);

        loadEvents();
    });
</script>



