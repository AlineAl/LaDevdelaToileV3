---
import Layout from "../../layouts/Layout.astro";
import Footer from "../../components/Footer.astro";
import InputAndFilter from "../../components/InputAndFilter.astro";
import GetOrHideMapButton from "../../components/GetOrHideMapButton.astro";
---

<Layout title="√âv√©nements">
    <h1 class="text-4xl text-center font-bold mt-8">√âv√©nements</h1>
    <p class="text-center text-lg mt-4 mx-4">
        Retrouvez ici une liste non-exhaustive de nombreux √©v√©nements et communaut√©s dev.
    </p>

    <GetOrHideMapButton />
    <InputAndFilter />

    <ul id="cardView" class="m-4 hidden grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2 auto-rows-[1fr]"></ul>

    <div id="mapView" class="flex flex-wrap md:flex-nowrap">
        <ul id="mapList" class="md:w-[50%] h-96 overflow-auto"></ul>

        <div class="m-4 map w-full md:w-[50%]">
            <div id="map" style="height: 400px;"></div>
        </div>
    </div>

    <Footer />
</Layout>

<script>
    import { map, marker, Marker, tileLayer, latLngBounds, latLng } from "leaflet";
    import { coordinatesCities } from "../../datas/coordinatesCities";

    document.addEventListener("astro:page-load", async () => {
        let markers: Record<string, Marker> = {};
        let eventMap: L.Map;

        let filteredEvents = [];
        let allEvents = [];

        async function loadEvents() {
            const response = await fetch("/communities-events.json");
            const data = await response.json();

            data.forEach(city => {
                city.communities.forEach(community => {
                    const events =
                        community.events.length > 0
                            ? community.events.map(event => ({
                                path: event.link,
                                title: event.title,
                                date: event.date,
                                location: {
                                    city: city.city,
                                    coordinates: [event.latitude, event.longitude]
                                },
                                isNotEvent: false
                            }))
                            : (() => {
                                const defaultCity = coordinatesCities.find(c => c.city === city.city);
                                return [
                                    {
                                        path: "#",
                                        title: "Aucun √©v√©nement",
                                        location: {
                                            city: city.city,
                                            coordinates: defaultCity ? defaultCity.coordinates : [0, 0]
                                        },
                                        isNotEvent: true
                                    }
                                ];
                            })();

                    allEvents.push({
                        title: community.name,
                        description:
                            community.description ||
                            `Ne manquez pas les √©v√©nements de la communaut√© ${community.name}.`,
                        events
                    });
                });
            });

            filteredEvents = [...allEvents];
            mapData(filteredEvents);
        }

        function generateSlug(title: string) {
            return title
                .toLowerCase()
                .replace(/\s+/g, "-")
                .replace(/[^\w\-]/g, "");
        }

        function generateDynamicUrl(baseUrl: string, title: string) {
            const slug = generateSlug(title);
            return baseUrl.replace(/\/[^/]+(?=\/events)/, `/${slug}`);
        }

        function updateMap(visibleData) {
            Object.values(markers).forEach(marker => map.removeLayer(marker));
            markers = {};

            visibleData.forEach(item => {
                item.events.forEach(event => {
                    const eventMarker = marker(event.location.coordinates).addTo(eventMap);
                    eventMarker.bindPopup(`
                         <div class="popup-content">
                            <h3 class="font-bold text-lg text-gray-800 mb-2">${item.title}</h3>
                            <p class="text-sm text-gray-600 mb-4">
                                üìç <span>${event.location.city}</span>
                            </p>
                            <div class="events-list space-y-2">
                                ${
                                item.events
                                    .filter(
                                        e =>
                                            (!e.isNotEvent && new Date(e.date) >= new Date()) ||
                                            new Date(e.date).toDateString() === new Date().toDateString()
                                    )
                                    .sort((a, b) => new Date(a.date) - new Date(b.date))
                                    .slice(0, 2)
                                    .map(
                                        e => `
                                    <div class="event-item flex flex-col gap-1">
                                        <time datetime="${e.date}" class="text-gray-500 text-sm">
                                            üìÖ ${new Date(e.date).toLocaleDateString("fr-FR", { weekday: "long", year: "numeric", month: "long", day: "numeric" })}
                                        </time>
                                        <a href="${e.path}" target="_blank" class="text-blue-600 hover:underline font-semibold">
                                            ${e.title}
                                        </a>
                                    </div>
                                `
                                    )
                                    .join("") ||
                                `
                                <div class="event-item">
                                    <p class="bg-red-100 text-red-800 text-sm font-medium me-2 px-2.5 py-1 rounded">Aucun √©v√©nement pr√©vu</p>
                                    <a href="${generateDynamicUrl("https://www.meetup.com/humantalks-grenoble/events", item.title)}" target="_blank" class="text-blue-500 hover:underline font-medium">
                                        En savoir plus
                                    </a>
                                </div>
                                `
                            }
                            </div>
                         </div>
                    `);
                    markers[`${item.title}`] = marker;
                });
            });

            if (visibleData.length > 0) {
                const validLocations = visibleData
                    .flatMap(item => item.events)
                    .filter(event => event.location && Array.isArray(event.location.coordinates) &&
                        event.location.coordinates.length === 2 &&
                        event.location.coordinates.every(coord => typeof coord === "number"));

                if (validLocations.length > 0) {
                    const bounds = latLngBounds(validLocations.map(event =>
                        latLng(event.location.coordinates)
                    ));
                    eventMap.flyToBounds(bounds, {
                        padding: [50, 50],
                        duration: 0.5
                    });
                } else {
                    console.warn("No valid locations to display on the map.");
                }
            }
        }

        function mapData(visibleData) {
            eventMap = map('map').setView([48.866667, 2.333333], 10);
            tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(eventMap);

            const listContainer = document.getElementById("mapList");
            const cardContainer = document.getElementById("cardView");
            listContainer.innerHTML = "";
            cardContainer.innerHTML = "";

            visibleData.forEach(d => {
                const list = document.createElement("li");
                const validEvents = d.events.filter(event => !event.isNotEvent);
                const eventPassed = validEvents.filter(
                    e => new Date(e.date) > new Date() || new Date(e.date).toDateString() === new Date().toDateString()
                );
                const eventCount = eventPassed.length;

                const eventClass = eventCount === 0 ? "bg-red-100 text-red-800" : "bg-sky-100 text-sky-800";

                list.innerHTML = `
                    <li data-marker="${d.title}" class="marker-item p-4 mb-4 m-4 bg-white border border-default transition-all hover:cursor-pointer hover:text-white hover:bg-sky-700">
                        <h2 class="font-semibold">${d.title}</h2>
                        <p class="text-sm my-2">${d.description}</p>
                        <span class="${eventClass} text-sm font-medium me-2 px-2.5 py-1 rounded">
                           ${
                    eventCount === 0
                        ? "Aucun √©v√©nement"
                        : `${eventCount} √©v√©nement${eventCount > 1 ? "s" : ""}`
                }
                        </span>
                    </li>`;
                listContainer?.appendChild(list);
            });

            visibleData.forEach(d => {
                const card = document.createElement("div");

                card.innerHTML = `<a href="${generateDynamicUrl("https://www.meetup.com/humantalks-grenoble/events", d.title)}" target="_blank">
                    <div class="min-h-full flex flex-col items-center gap-4 border border-default bg-offset p-6 transition duration-300 ease-in-out hover:cursor-pointer hover:text-white hover:bg-sky-700">
                        <p class="text-center font-extrabold text-xl">${d.title}</p>
                        <p class="text-center text-offset text-sm">${d.description}</p>
                    </div>
                </a>`;

                cardContainer?.appendChild(card);
            });

            updateMap(visibleData);

            const allItems = document.querySelectorAll(".marker-item");

            allItems.forEach(item => {
                item.addEventListener('click', () => {
                    const markerTitle = item.getAttribute('data-marker');
                    if (!markerTitle) {
                        return;
                    }
                    const marker = markers[markerTitle];

                    if (marker) {
                        console.log(marker);
                        marker.openPopup();
                        const markerLatLng = marker.getLatLng();
                        const offsetLatLng = latLng(markerLatLng.lat + 0.05, markerLatLng.lng);
                        eventMap.flyTo(offsetLatLng, 11, {
                            duration: 0.5
                        });
                    }
                });
            });
        }

        const toggleButton = document.getElementById("toggleButton");
        const cardView = document.getElementById("cardView");
        const mapView = document.getElementById("mapView");
        const buttonText = document.getElementById("buttonText");

        toggleButton?.addEventListener("click", () => {
            cardView?.classList.toggle("hidden");
            mapView?.classList.toggle("hidden");

            if (mapView?.classList.contains("hidden")) {
                buttonText.textContent = "Afficher avec la carte";
            } else {
                buttonText.textContent = "Afficher sans la carte";
            }
        });

        await loadEvents();
    });
</script>
